{"ast":null,"code":"const cron = require(\"node-cron\");\nconst nodemailer = require(\"nodemailer\");\nconst Student = require(\"./models/Student\"); // Import your Student model\n\n// ✅ Create a transporter for sending emails\nconst transporter = nodemailer.createTransport({\n  service: \"gmail\",\n  // Use your email service (e.g., Gmail, Outlook)\n  auth: {\n    user: \"your-email@gmail.com\",\n    // Your email address\n    pass: \"your-email-password\" // Your email password or app-specific password\n  }\n});\n\n// ✅ Function to send payment link email\nconst sendPaymentLinkEmail = async (student, installment) => {\n  const mailOptions = {\n    from: \"your-email@gmail.com\",\n    // Sender email\n    to: student.contactEmail,\n    // Recipient email\n    subject: \"Upcoming Installment Payment Reminder\",\n    // Email subject\n    text: `Dear ${student.studentName},\\n\\nYour installment ${installment.installmentNo} of ₹${installment.amount} is due on ${installment.dueDate}. Please pay using the following link: http://your-payment-link.com\\n\\nRegards,\\nYour School` // Email body\n  };\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log(`Payment reminder email sent to ${student.contactEmail}`);\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n  }\n};\n\n// ✅ Scheduled task to check for installments due in 2 days\ncron.schedule(\"0 9 * * *\", async () => {\n  console.log(\"Running scheduled task to check for installments due in 2 days...\");\n  try {\n    // Get the current date\n    const currentDate = new Date();\n\n    // Calculate the date 2 days from now\n    const twoDaysLater = new Date(currentDate.getTime() + 2 * 24 * 60 * 60 * 1000);\n\n    // Find students with installments due in exactly 2 days\n    const students = await Student.find({\n      \"feeStructure.installments.dueDate\": {\n        $gte: new Date(twoDaysLater.setHours(0, 0, 0, 0)),\n        // Start of the day 2 days later\n        $lte: new Date(twoDaysLater.setHours(23, 59, 59, 999)) // End of the day 2 days later\n      }\n    }).populate(\"feeStructure.installments\");\n\n    // Send payment reminder emails\n    students.forEach(student => {\n      student.feeStructure.installments.forEach(installment => {\n        const installmentDueDate = new Date(installment.dueDate);\n        if (installmentDueDate >= new Date(twoDaysLater.setHours(0, 0, 0, 0)) && installmentDueDate <= new Date(twoDaysLater.setHours(23, 59, 59, 999))) {\n          sendPaymentLinkEmail(student, installment);\n        }\n      });\n    });\n  } catch (error) {\n    console.error(\"Error checking for upcoming installments:\", error);\n  }\n});","map":{"version":3,"names":["cron","require","nodemailer","Student","transporter","createTransport","service","auth","user","pass","sendPaymentLinkEmail","student","installment","mailOptions","from","to","contactEmail","subject","text","studentName","installmentNo","amount","dueDate","sendMail","console","log","error","schedule","currentDate","Date","twoDaysLater","getTime","students","find","$gte","setHours","$lte","populate","forEach","feeStructure","installments","installmentDueDate"],"sources":["C:/Users/amank/Desktop/smartfee(admin)/frontend/frontend/src/components/PaymentForm.js"],"sourcesContent":["const cron = require(\"node-cron\");\r\nconst nodemailer = require(\"nodemailer\");\r\nconst Student = require(\"./models/Student\"); // Import your Student model\r\n\r\n// ✅ Create a transporter for sending emails\r\nconst transporter = nodemailer.createTransport({\r\n  service: \"gmail\", // Use your email service (e.g., Gmail, Outlook)\r\n  auth: {\r\n    user: \"your-email@gmail.com\", // Your email address\r\n    pass: \"your-email-password\", // Your email password or app-specific password\r\n  },\r\n});\r\n\r\n// ✅ Function to send payment link email\r\nconst sendPaymentLinkEmail = async (student, installment) => {\r\n  const mailOptions = {\r\n    from: \"your-email@gmail.com\", // Sender email\r\n    to: student.contactEmail, // Recipient email\r\n    subject: \"Upcoming Installment Payment Reminder\", // Email subject\r\n    text: `Dear ${student.studentName},\\n\\nYour installment ${installment.installmentNo} of ₹${installment.amount} is due on ${installment.dueDate}. Please pay using the following link: http://your-payment-link.com\\n\\nRegards,\\nYour School`, // Email body\r\n  };\r\n\r\n  try {\r\n    await transporter.sendMail(mailOptions);\r\n    console.log(`Payment reminder email sent to ${student.contactEmail}`);\r\n  } catch (error) {\r\n    console.error(\"Error sending email:\", error);\r\n  }\r\n};\r\n\r\n// ✅ Scheduled task to check for installments due in 2 days\r\ncron.schedule(\"0 9 * * *\", async () => {\r\n  console.log(\"Running scheduled task to check for installments due in 2 days...\");\r\n\r\n  try {\r\n    // Get the current date\r\n    const currentDate = new Date();\r\n\r\n    // Calculate the date 2 days from now\r\n    const twoDaysLater = new Date(currentDate.getTime() + 2 * 24 * 60 * 60 * 1000);\r\n\r\n    // Find students with installments due in exactly 2 days\r\n    const students = await Student.find({\r\n      \"feeStructure.installments.dueDate\": {\r\n        $gte: new Date(twoDaysLater.setHours(0, 0, 0, 0)), // Start of the day 2 days later\r\n        $lte: new Date(twoDaysLater.setHours(23, 59, 59, 999)), // End of the day 2 days later\r\n      },\r\n    }).populate(\"feeStructure.installments\");\r\n\r\n    // Send payment reminder emails\r\n    students.forEach((student) => {\r\n      student.feeStructure.installments.forEach((installment) => {\r\n        const installmentDueDate = new Date(installment.dueDate);\r\n        if (\r\n          installmentDueDate >= new Date(twoDaysLater.setHours(0, 0, 0, 0)) &&\r\n          installmentDueDate <= new Date(twoDaysLater.setHours(23, 59, 59, 999))\r\n        ) {\r\n          sendPaymentLinkEmail(student, installment);\r\n        }\r\n      });\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error checking for upcoming installments:\", error);\r\n  }\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}